; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=2

                  GPIO_Init PROC
;;;97     
;;;98     void GPIO_Init (void)
000000  b510              PUSH     {r4,lr}
;;;99     {
;;;100        GPIO_SetMode(PB, BIT14, GPIO_MODE_OUTPUT);
000002  2201              MOVS     r2,#1
000004  0391              LSLS     r1,r2,#14
000006  4802              LDR      r0,|L1.16|
000008  f7fffffe          BL       GPIO_SetMode
;;;101    }
00000c  bd10              POP      {r4,pc}
;;;102    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x40004040

                          AREA ||i.PWM0_Init||, CODE, READONLY, ALIGN=2

                  PWM0_Init PROC
;;;63     
;;;64     void PWM0_Init(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;65     {
;;;66         /*
;;;67           Configure PWM0 channel 0 init period and duty(down counter type).
;;;68           Period is PLL / (prescaler * (CNR + 1))
;;;69           Duty ratio = CMR / (CNR + 1)
;;;70           
;;;71           Period = 48 MHz / (1 * (199 + 1)) = 240000 Hz
;;;72           Duty ratio = 100 / (199 + 1) = 50%
;;;73         */
;;;74     	
;;;75         /* Set PWM0 timer clock prescaler */
;;;76         PWM_SET_PRESCALER(PWM0, 0, PWM_PSC - 1);
000002  4820              LDR      r0,|L2.132|
000004  491e              LDR      r1,|L2.128|
000006  6141              STR      r1,[r0,#0x14]
;;;77     
;;;78         /* Set up counter type */
;;;79         PWM0->CTL1 &= ~PWM_CTL1_CNTTYPE0_Msk;
000008  6841              LDR      r1,[r0,#4]
00000a  0889              LSRS     r1,r1,#2
00000c  0089              LSLS     r1,r1,#2
00000e  6041              STR      r1,[r0,#4]
;;;80     
;;;81         /* Set PWM0 timer period */
;;;82         PWM_SET_CNR(PWM0, 0, PWM_CNR);
000010  491d              LDR      r1,|L2.136|
000012  6301              STR      r1,[r0,#0x30]
;;;83     
;;;84         /* Set PWM0 timer duty */
;;;85         PWM_SET_CMR(PWM0, 0, PWM_CMR);	
000014  491b              LDR      r1,|L2.132|
000016  2000              MOVS     r0,#0
000018  3140              ADDS     r1,r1,#0x40
00001a  6108              STR      r0,[r1,#0x10]
;;;86     
;;;87         /* Set output level at zero, compare up, period(center) and compare down of specified channel */
;;;88         PWM_SET_OUTPUT_LEVEL(PWM0, PWM_CH_0_MASK, PWM_OUTPUT_HIGH, PWM_OUTPUT_LOW, PWM_OUTPUT_NOTHING, PWM_OUTPUT_NOTHING);
00001c  2401              MOVS     r4,#1
                  |L2.30|
00001e  4621              MOV      r1,r4
000020  4081              LSLS     r1,r1,r0
000022  07c9              LSLS     r1,r1,#31
000024  d01a              BEQ      |L2.92|
000026  4917              LDR      r1,|L2.132|
000028  3180              ADDS     r1,r1,#0x80
00002a  6b0d              LDR      r5,[r1,#0x30]
00002c  2703              MOVS     r7,#3
00002e  0042              LSLS     r2,r0,#1
000030  463b              MOV      r3,r7
000032  4093              LSLS     r3,r3,r2
000034  2602              MOVS     r6,#2
000036  439d              BICS     r5,r5,r3
000038  4096              LSLS     r6,r6,r2
00003a  4335              ORRS     r5,r5,r6
00003c  630d              STR      r5,[r1,#0x30]
00003e  6b0d              LDR      r5,[r1,#0x30]
000040  4616              MOV      r6,r2
000042  3610              ADDS     r6,r6,#0x10
000044  40b7              LSLS     r7,r7,r6
000046  43bd              BICS     r5,r5,r7
000048  630d              STR      r5,[r1,#0x30]
00004a  6b4d              LDR      r5,[r1,#0x34]
00004c  439d              BICS     r5,r5,r3
00004e  4623              MOV      r3,r4
000050  4093              LSLS     r3,r3,r2
000052  431d              ORRS     r5,r5,r3
000054  634d              STR      r5,[r1,#0x34]
000056  6b4a              LDR      r2,[r1,#0x34]
000058  43ba              BICS     r2,r2,r7
00005a  634a              STR      r2,[r1,#0x34]
                  |L2.92|
00005c  1c40              ADDS     r0,r0,#1
00005e  2806              CMP      r0,#6
000060  dbdd              BLT      |L2.30|
;;;89     
;;;90         /* Enable output of PWM0 channel 0 */
;;;91         PWM_EnableOutput(PWM0, PWM_CH_0_MASK);
000062  4d08              LDR      r5,|L2.132|
000064  2101              MOVS     r1,#1
000066  4628              MOV      r0,r5
000068  f7fffffe          BL       PWM_EnableOutput
;;;92     
;;;93     	PWM_Start(PWM0, PWM_CH_0_MASK);
00006c  2101              MOVS     r1,#1
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       PWM_Start
;;;94     
;;;95     	set_flag(flag_reverse , ENABLE);
000074  4905              LDR      r1,|L2.140|
000076  7808              LDRB     r0,[r1,#0]  ; BitFlag
000078  4320              ORRS     r0,r0,r4
00007a  7008              STRB     r0,[r1,#0]
;;;96     }
00007c  bdf8              POP      {r3-r7,pc}
;;;97     
                          ENDP

00007e  0000              DCW      0x0000
                  |L2.128|
                          DCD      0x000003e7
                  |L2.132|
                          DCD      0x40058000
                  |L2.136|
                          DCD      0x0000bb7f
                  |L2.140|
                          DCD      ||.data||

                          AREA ||i.PWM_Set_Duty||, CODE, READONLY, ALIGN=2

                  PWM_Set_Duty PROC
;;;55     
;;;56     void PWM_Set_Duty(uint16_t duty)		// 1 ~ 1000 , 0.1 % to 100%
000000  b510              PUSH     {r4,lr}
;;;57     {
;;;58         uint32_t u32NewCMR = 0;
;;;59     	u32NewCMR = CalNewDutyCMR(PWM0, 0, duty, 1000);    
000002  4906              LDR      r1,|L3.28|
000004  6b09              LDR      r1,[r1,#0x30]
000006  1c49              ADDS     r1,r1,#1
000008  4348              MULS     r0,r1,r0
00000a  217d              MOVS     r1,#0x7d
00000c  00c9              LSLS     r1,r1,#3
00000e  f7fffffe          BL       __aeabi_uidivmod
;;;60     	PWM_SET_CMR(PWM0, 0, u32NewCMR);
000012  4902              LDR      r1,|L3.28|
000014  3140              ADDS     r1,r1,#0x40
000016  6108              STR      r0,[r1,#0x10]
;;;61     }
000018  bd10              POP      {r4,pc}
;;;62     
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0x40058000

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;177    
;;;178    void SYS_Init(void)
000000  b5f8              PUSH     {r3-r7,lr}
000002  2059              MOVS     r0,#0x59
000004  4c22              LDR      r4,|L4.144|
000006  2216              MOVS     r2,#0x16
000008  2188              MOVS     r1,#0x88
                  |L4.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6022              STR      r2,[r4,#0]
00000e  6021              STR      r1,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L4.10|
;;;179    {
;;;180        /* Unlock protected registers */
;;;181        SYS_UnlockReg();
;;;182    
;;;183        /* Enable HIRC clock (Internal RC 48MHz) */
;;;184        CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;185    
;;;186        /* Wait for HIRC clock ready */
;;;187        CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;188    
;;;189        /* Select HCLK clock source as HIRC and HCLK source divider as 1 */
;;;190        CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
000022  2100              MOVS     r1,#0
000024  2007              MOVS     r0,#7
000026  f7fffffe          BL       CLK_SetHCLK
;;;191    
;;;192        /* Enable UART0 clock */
;;;193        CLK_EnableModuleClock(UART0_MODULE);
00002a  4d1a              LDR      r5,|L4.148|
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       CLK_EnableModuleClock
;;;194        CLK_EnableModuleClock(TMR1_MODULE);
000032  4e19              LDR      r6,|L4.152|
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       CLK_EnableModuleClock
;;;195        CLK_EnableModuleClock(PWM0_MODULE);
00003a  4f18              LDR      r7,|L4.156|
00003c  4638              MOV      r0,r7
00003e  f7fffffe          BL       CLK_EnableModuleClock
;;;196    
;;;197        /* Switch UART0 clock source to HIRC */
;;;198        CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_PCLK0, CLK_CLKDIV0_UART0(1));
000042  2200              MOVS     r2,#0
000044  05b9              LSLS     r1,r7,#22
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       CLK_SetModuleClock
;;;199        CLK_SetModuleClock(TMR1_MODULE, CLK_CLKSEL1_TMR1SEL_HIRC, 0);
00004c  2107              MOVS     r1,#7
00004e  2200              MOVS     r2,#0
000050  0309              LSLS     r1,r1,#12
000052  4630              MOV      r0,r6
000054  f7fffffe          BL       CLK_SetModuleClock
;;;200        CLK_SetModuleClock(PWM0_MODULE, CLK_CLKSEL2_PWM0SEL_PCLK0, 0);
000058  2200              MOVS     r2,#0
00005a  2101              MOVS     r1,#1
00005c  4638              MOV      r0,r7
00005e  f7fffffe          BL       CLK_SetModuleClock
;;;201    	
;;;202        /* Set PB multi-function pins for UART0 RXD=PB.12 and TXD=PB.13 */
;;;203        SYS->GPB_MFPH = (SYS->GPB_MFPH & ~(SYS_GPB_MFPH_PB12MFP_Msk | SYS_GPB_MFPH_PB13MFP_Msk))    |       \
000062  06a8              LSLS     r0,r5,#26
000064  6bc1              LDR      r1,[r0,#0x3c]
000066  22ff              MOVS     r2,#0xff
000068  0412              LSLS     r2,r2,#16
00006a  4391              BICS     r1,r1,r2
00006c  2233              MOVS     r2,#0x33
00006e  0452              LSLS     r2,r2,#17
000070  1889              ADDS     r1,r1,r2
000072  63c1              STR      r1,[r0,#0x3c]
;;;204                        (SYS_GPB_MFPH_PB12MFP_UART0_RXD | SYS_GPB_MFPH_PB13MFP_UART0_TXD);
;;;205    
;;;206        SYS->GPA_MFPL = (SYS->GPA_MFPL & (~SYS_GPA_MFPL_PA5MFP_Msk)) | SYS_GPA_MFPL_PA5MFP_PWM0_CH0;
000074  6b01              LDR      r1,[r0,#0x30]
000076  220f              MOVS     r2,#0xf
000078  0512              LSLS     r2,r2,#20
00007a  4391              BICS     r1,r1,r2
00007c  220d              MOVS     r2,#0xd
00007e  0512              LSLS     r2,r2,#20
000080  1889              ADDS     r1,r1,r2
000082  6301              STR      r1,[r0,#0x30]
;;;207    	
;;;208        /* Update System Core Clock */
;;;209        SystemCoreClockUpdate();
000084  f7fffffe          BL       SystemCoreClockUpdate
000088  2000              MOVS     r0,#0
00008a  6020              STR      r0,[r4,#0]
;;;210    
;;;211        /* Lock protected registers */
;;;212        SYS_LockReg();
;;;213    }
00008c  bdf8              POP      {r3-r7,pc}
;;;214    
                          ENDP

00008e  0000              DCW      0x0000
                  |L4.144|
                          DCD      0x40000100
                  |L4.148|
                          DCD      0x5f803d10
                  |L4.152|
                          DCD      0x5ec00003
                  |L4.156|
                          DCD      0xa2000010

                          AREA ||i.TIMER1_Init||, CODE, READONLY, ALIGN=2

                  TIMER1_Init PROC
;;;151    
;;;152    void TIMER1_Init(void)
000000  b510              PUSH     {r4,lr}
;;;153    {
;;;154        TIMER_Open(TIMER1, TIMER_PERIODIC_MODE, 1000);
000002  4c0a              LDR      r4,|L5.44|
000004  227d              MOVS     r2,#0x7d
000006  2101              MOVS     r1,#1
000008  00d2              LSLS     r2,r2,#3
00000a  06c9              LSLS     r1,r1,#27
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       TIMER_Open
000012  6820              LDR      r0,[r4,#0]
000014  0621              LSLS     r1,r4,#24
000016  4308              ORRS     r0,r0,r1
000018  6020              STR      r0,[r4,#0]
00001a  1508              ASRS     r0,r1,#20
00001c  4904              LDR      r1,|L5.48|
00001e  6008              STR      r0,[r1,#0]
000020  6820              LDR      r0,[r4,#0]
000022  0589              LSLS     r1,r1,#22
000024  4308              ORRS     r0,r0,r1
000026  6020              STR      r0,[r4,#0]
;;;155        TIMER_EnableInt(TIMER1);
;;;156        NVIC_EnableIRQ(TMR1_IRQn);	
;;;157        TIMER_Start(TIMER1);
;;;158    }
000028  bd10              POP      {r4,pc}
;;;159    
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      0x40050020
                  |L5.48|
                          DCD      0xe000e100

                          AREA ||i.TMR1_IRQHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  TMR1_IRQHandler PROC
;;;102    
;;;103    void TMR1_IRQHandler(void)
000000  b5f8              PUSH     {r3-r7,lr}
000002  4920              LDR      r1,|L6.132|
000004  6888              LDR      r0,[r1,#8]
000006  07c0              LSLS     r0,r0,#31
000008  0fc0              LSRS     r0,r0,#31
;;;104    {
00000a  d03a              BEQ      |L6.130|
00000c  2601              MOVS     r6,#1
00000e  608e              STR      r6,[r1,#8]
;;;105    	static uint32_t LOG = 0;
;;;106    	static uint16_t CNT = 0;
;;;107    
;;;108    	static uint16_t CNT_PWM = 1;
;;;109    	static uint16_t duty = 500;	// 1 ~ 1000 , 0.1 % to 100%
;;;110    
;;;111        if(TIMER_GetIntFlag(TIMER1) == 1)
;;;112        {
;;;113            TIMER_ClearIntFlag(TIMER1);
;;;114    
;;;115    		if (CNT_PWM++ == 500)
000010  4d1d              LDR      r5,|L6.136|
;;;116    		{
;;;117    			CNT_PWM = 1;
;;;118    			
;;;119    //			PWM_Set_Duty(duty);
;;;120    			CalNewDuty(PWM0, 0, duty, 1000);
000012  277d              MOVS     r7,#0x7d
000014  88a8              LDRH     r0,[r5,#4]            ;115  ; CNT_PWM
000016  00ff              LSLS     r7,r7,#3
000018  1c41              ADDS     r1,r0,#1              ;115
00001a  80a9              STRH     r1,[r5,#4]            ;115
00001c  4601              MOV      r1,r0                 ;115
00001e  39ff              SUBS     r1,r1,#0xff           ;115
000020  39f5              SUBS     r1,r1,#0xf5           ;115
000022  d120              BNE      |L6.102|
000024  4819              LDR      r0,|L6.140|
000026  80ae              STRH     r6,[r5,#4]            ;117
000028  6b00              LDR      r0,[r0,#0x30]
00002a  88ec              LDRH     r4,[r5,#6]  ; duty
00002c  1c40              ADDS     r0,r0,#1
00002e  4360              MULS     r0,r4,r0
000030  4639              MOV      r1,r7
000032  f7fffffe          BL       __aeabi_uidivmod
000036  4a15              LDR      r2,|L6.140|
000038  3240              ADDS     r2,r2,#0x40
00003a  6110              STR      r0,[r2,#0x10]
;;;121    
;;;122    			if (is_flag_set(flag_reverse))
00003c  7828              LDRB     r0,[r5,#0]  ; BitFlag
00003e  07c1              LSLS     r1,r0,#31
000040  d001              BEQ      |L6.70|
000042  1c64              ADDS     r4,r4,#1
;;;123    			{
;;;124    				duty++;	
000044  e000              B        |L6.72|
                  |L6.70|
000046  1e64              SUBS     r4,r4,#1
                  |L6.72|
;;;125    			}
;;;126    			else
;;;127    			{
;;;128    				duty--;
;;;129    			}
;;;130    
;;;131    			if (duty == 1000)
000048  b2a1              UXTH     r1,r4
00004a  80ec              STRH     r4,[r5,#6]            ;128
00004c  42b9              CMP      r1,r7
00004e  d102              BNE      |L6.86|
;;;132    			{
;;;133    				set_flag(flag_reverse , DISABLE);				
000050  0840              LSRS     r0,r0,#1
000052  0040              LSLS     r0,r0,#1
000054  e002              B        |L6.92|
                  |L6.86|
;;;134    			}
;;;135    			else if (duty == 0)
000056  2900              CMP      r1,#0
000058  d101              BNE      |L6.94|
;;;136    			{
;;;137    				set_flag(flag_reverse , ENABLE);
00005a  4330              ORRS     r0,r0,r6
                  |L6.92|
00005c  7028              STRB     r0,[r5,#0]
                  |L6.94|
;;;138    			}
;;;139    			
;;;140    			PB14 ^= 1;
00005e  480c              LDR      r0,|L6.144|
000060  6b81              LDR      r1,[r0,#0x38]
000062  4071              EORS     r1,r1,r6
000064  6381              STR      r1,[r0,#0x38]
                  |L6.102|
;;;141    		}		
;;;142    
;;;143    		if (CNT++ >= 1000)
000066  8868              LDRH     r0,[r5,#2]  ; CNT
000068  1c41              ADDS     r1,r0,#1
00006a  8069              STRH     r1,[r5,#2]
00006c  42b8              CMP      r0,r7
00006e  d308              BCC      |L6.130|
;;;144    		{		
;;;145    			CNT = 0;		
000070  2000              MOVS     r0,#0
000072  8068              STRH     r0,[r5,#2]
;;;146            	printf("%s : %4d\r\n",__FUNCTION__,LOG++);
000074  68aa              LDR      r2,[r5,#8]  ; LOG
000076  4907              LDR      r1,|L6.148|
000078  1c50              ADDS     r0,r2,#1
00007a  60a8              STR      r0,[r5,#8]  ; LOG
00007c  a006              ADR      r0,|L6.152|
00007e  f7fffffe          BL       __2printf
                  |L6.130|
;;;147    		}
;;;148        }
;;;149    }
000082  bdf8              POP      {r3-r7,pc}
;;;150    
                          ENDP

                  |L6.132|
                          DCD      0x40050020
                  |L6.136|
                          DCD      ||.data||
                  |L6.140|
                          DCD      0x40058000
                  |L6.144|
                          DCD      0x40004840
                  |L6.148|
                          DCD      ||.constdata||
                  |L6.152|
000098  2573203a          DCB      "%s : %4d\r\n",0
00009c  20253464
0000a0  0d0a00  
0000a3  00                DCB      0

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UART0_Init PROC
;;;159    
;;;160    void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;161    {
;;;162        SYS_ResetModule(UART0_RST);
000002  4816              LDR      r0,|L7.92|
000004  f7fffffe          BL       SYS_ResetModule
;;;163    
;;;164        /* Configure UART0 and set UART0 baud rate */
;;;165        UART_Open(UART0, 115200);
000008  4c15              LDR      r4,|L7.96|
00000a  21e1              MOVS     r1,#0xe1
00000c  0249              LSLS     r1,r1,#9
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       UART_Open
;;;166    
;;;167    	/* Set UART receive time-out */
;;;168    	UART_SetTimeoutCnt(UART0, 20);
000014  2114              MOVS     r1,#0x14
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       UART_SetTimeoutCnt
;;;169    
;;;170    	printf("\r\nCLK_GetCPUFreq : %8d\r\n",CLK_GetCPUFreq());
00001c  f7fffffe          BL       CLK_GetCPUFreq
000020  4601              MOV      r1,r0
000022  a010              ADR      r0,|L7.100|
000024  f7fffffe          BL       __2printf
;;;171    	printf("CLK_GetHXTFreq : %8d\r\n",CLK_GetHXTFreq());
000028  f7fffffe          BL       CLK_GetHXTFreq
00002c  4601              MOV      r1,r0
00002e  a014              ADR      r0,|L7.128|
000030  f7fffffe          BL       __2printf
;;;172    	printf("CLK_GetLXTFreq : %8d\r\n",CLK_GetLXTFreq());	
000034  f7fffffe          BL       CLK_GetLXTFreq
000038  4601              MOV      r1,r0
00003a  a017              ADR      r0,|L7.152|
00003c  f7fffffe          BL       __2printf
;;;173    	printf("CLK_GetPCLK0Freq : %8d\r\n",CLK_GetPCLK0Freq());
000040  f7fffffe          BL       CLK_GetPCLK0Freq
000044  4601              MOV      r1,r0
000046  a01a              ADR      r0,|L7.176|
000048  f7fffffe          BL       __2printf
;;;174    	printf("CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPCLK1Freq());
00004c  f7fffffe          BL       CLK_GetPCLK1Freq
000050  4601              MOV      r1,r0
000052  a01e              ADR      r0,|L7.204|
000054  f7fffffe          BL       __2printf
;;;175    	
;;;176    }
000058  bd10              POP      {r4,pc}
;;;177    
                          ENDP

00005a  0000              DCW      0x0000
                  |L7.92|
                          DCD      0x04000010
                  |L7.96|
                          DCD      0x40070000
                  |L7.100|
000064  0d0a434c          DCB      "\r\nCLK_GetCPUFreq : %8d\r\n",0
000068  4b5f4765
00006c  74435055
000070  46726571
000074  203a2025
000078  38640d0a
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L7.128|
000080  434c4b5f          DCB      "CLK_GetHXTFreq : %8d\r\n",0
000084  47657448
000088  58544672
00008c  6571203a
000090  20253864
000094  0d0a00  
000097  00                DCB      0
                  |L7.152|
000098  434c4b5f          DCB      "CLK_GetLXTFreq : %8d\r\n",0
00009c  4765744c
0000a0  58544672
0000a4  6571203a
0000a8  20253864
0000ac  0d0a00  
0000af  00                DCB      0
                  |L7.176|
0000b0  434c4b5f          DCB      "CLK_GetPCLK0Freq : %8d\r\n",0
0000b4  47657450
0000b8  434c4b30
0000bc  46726571
0000c0  203a2025
0000c4  38640d0a
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L7.204|
0000cc  434c4b5f          DCB      "CLK_GetPCLK1Freq : %8d\r\n",0
0000d0  47657450
0000d4  434c4b31
0000d8  46726571
0000dc  203a2025
0000e0  38640d0a
0000e4  00      
0000e5  00                DCB      0
0000e6  00                DCB      0
0000e7  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;222    
;;;223    int main()
000000  f7fffffe          BL       SYS_Init
;;;224    {
;;;225        SYS_Init();
;;;226    
;;;227        UART0_Init();
000004  f7fffffe          BL       UART0_Init
;;;228    
;;;229    	GPIO_Init();
000008  f7fffffe          BL       GPIO_Init
;;;230    
;;;231    	PWM0_Init();
00000c  f7fffffe          BL       PWM0_Init
;;;232    
;;;233    	TIMER1_Init();
000010  f7fffffe          BL       TIMER1_Init
                  |L8.20|
;;;234    	
;;;235    	
;;;236        /* Got no where to go, just loop forever */
;;;237        while(1)
000014  e7fe              B        |L8.20|
;;;238        {
;;;239    
;;;240        }
;;;241    }
;;;242    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  544d5231          DCB      0x54,0x4d,0x52,0x31
000004  5f495251          DCB      0x5f,0x49,0x52,0x51
000008  48616e64          DCB      0x48,0x61,0x6e,0x64
00000c  6c657200          DCB      0x6c,0x65,0x72,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  BitFlag
000000  0000              DCB      0x00,0x00
                  ||CNT||
000002  0000              DCW      0x0000
                  CNT_PWM
000004  0001              DCW      0x0001
                  duty
000006  01f4              DCW      0x01f4
                  LOG
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_BitFlag____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_BitFlag____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_BitFlag____REVSH|
#line 402
|__asm___6_main_c_BitFlag____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
